{"version":3,"sources":["types/Person.ts","components/Filters/FilterRow.tsx","components/PeopleTable/THead.tsx","types/FilterElement.ts","components/PeopleTable/PeopleTable.tsx","utils/api.ts","utils/filters.ts","App.tsx","index.tsx"],"names":["PersonEnum","FilterRow","children","label","className","FilterNames","THead","theadTitles","Object","values","map","el","PeopleTable","React","memo","people","isLoading","person","name","lastname","age","sex","getPeople","a","fetch","response","json","data","console","log","FILTERS_LIST","elements","Name","type","Lastname","Age","Male","text","Female","App","useState","peopleServer","setPeopleServer","setIsLoading","male","female","filters","setFilters","useEffect","then","modifyPeople","useMemo","filter","toLowerCase","includes","toString","handlerChangeInput","attr","value","prev","element","htmlFor","id","checked","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e1da8a3.chunk.js","sourcesContent":["export interface Person {\n  name: string,\n  lastname: string,\n  age: number,\n  sex: 'm' | 'f',\n}\n\n// eslint-disable-next-line no-shadow\nexport enum PersonEnum {\n  name = 'Имя',\n  lastname = 'Фамилиия',\n  age = 'Возраст',\n  sex = 'Пол',\n}\n","import React, { FC } from 'react';\n\ntype Props = {\n  label: string\n};\n\nexport const FilterRow: FC<Props> = ({ children, label }) => {\n  return (\n    <div className=\"filters__row\">\n      <div className=\"filters__title\">\n        {label}\n        :\n      </div>\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport { PersonEnum } from '../../types/Person';\n\nexport const THead = () => {\n  const theadTitles = Object.values(PersonEnum);\n\n  return (\n    <thead>\n      <tr>\n        {\n          theadTitles.map((el: string) => (\n            <th key={el}>\n              {el}\n              :\n            </th>\n          ))\n        }\n      </tr>\n    </thead>\n  );\n};\n","export interface FilterElement {\n  name: FilterNames,\n  type: string,\n  text?: string,\n}\n\n// eslint-disable-next-line no-shadow\nexport enum FilterNames {\n  Female = 'female',\n  Male = 'male',\n  Age = 'age',\n  Name = 'name',\n  Lastname = 'lastname',\n}\n","import React, { FC } from 'react';\nimport { THead } from './THead';\nimport { Person } from '../../types/Person';\n\ntype Props = {\n  people: Person[];\n  isLoading: boolean;\n};\n\nexport const PeopleTable: FC<Props> = React.memo(({ people, isLoading }) => {\n  return (\n    <table className=\"table\">\n      <THead />\n      <tbody>\n        {\n          isLoading ? <tr><td>Loading...</td></tr> : (\n            people.map((person) => (\n              <tr key={person.name + person.lastname}>\n                <td>\n                  {person.name}\n                </td>\n                <td>\n                  {person.lastname}\n                </td>\n                <td>\n                  {person.age}\n                </td>\n                <td>\n                  {person.sex}\n                </td>\n              </tr>\n            ))\n          )\n        }\n      </tbody>\n    </table>\n  );\n});\n","const BASE_URL = 'https://venbest-test.herokuapp.com/';\n\nexport const getPeople = async () => {\n  let data;\n\n  try {\n    const response = await fetch(BASE_URL);\n\n    data = await response.json();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  }\n\n  return data;\n};\n","import { FilterNames } from '../types/FilterElement';\n\nexport const FILTERS_LIST = [\n  {\n    label: 'Имя',\n    elements: [\n      {\n        name: FilterNames.Name,\n        type: 'text',\n      },\n    ],\n  },\n  {\n    label: 'Фамилия',\n    elements: [\n      {\n        name: FilterNames.Lastname,\n        type: 'text',\n      },\n    ],\n  },\n  {\n    label: 'Возраст',\n    elements: [\n      {\n        name: FilterNames.Age,\n        type: 'text',\n      },\n    ],\n  },\n  {\n    label: 'Пол',\n    elements: [\n      {\n        name: FilterNames.Male,\n        type: 'checkbox',\n        text: 'М*',\n      },\n      {\n        name: FilterNames.Female,\n        type: 'checkbox',\n        text: 'Ж*',\n      },\n    ],\n  },\n];\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { FilterRow } from './components/Filters/FilterRow';\nimport { PeopleTable } from './components/PeopleTable/PeopleTable';\nimport { FilterElement } from './types/FilterElement';\nimport { Person } from './types/Person';\nimport { getPeople } from './utils/api';\nimport { FILTERS_LIST } from './utils/filters';\n\ninterface State {\n  name: string,\n  lastname: string,\n  age: string,\n  male: boolean,\n  female: boolean,\n}\n\nexport const App: React.FC = () => {\n  const [peopleServer, setPeopleServer] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [filters, setFilters] = useState<State>({\n    name: '',\n    lastname: '',\n    age: '',\n    male: false,\n    female: false,\n  });\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(people => {\n        setPeopleServer(people);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const modifyPeople = useMemo(() => peopleServer.filter((person: Person) => {\n    return (\n      person.name.toLowerCase().includes(filters.name.toLowerCase())\n      && person.lastname.toLowerCase().includes(filters.lastname.toLowerCase())\n      && person.age.toString().includes(filters.age)\n      && (\n        (person.sex === 'f' && filters.female)\n        || (person.sex === 'm' && filters.male)\n        || (!filters.female && !filters.male)\n      )\n    );\n  }), [peopleServer, filters]);\n\n  const handlerChangeInput = (attr: string, value?: string) => {\n    switch (attr) {\n      case 'name':\n      case 'lastname':\n      case 'age':\n        setFilters((prev) => ({ ...prev, [attr]: value }));\n        break;\n\n      case 'male':\n      case 'female':\n        setFilters((prev) => ({ ...prev, [attr]: !prev[attr] }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"people\">\n          <div className=\"people__table\">\n            <PeopleTable\n              people={modifyPeople}\n              isLoading={isLoading}\n            />\n          </div>\n          <div className=\"people__filters\">\n            <h3 className=\"mb-20\">Фильтры:</h3>\n            {\n              FILTERS_LIST.map(el => (\n                <FilterRow\n                  key={el.label}\n                  label={el.label}\n                >\n                  {\n                    el.elements.map((element: FilterElement) => {\n                      if (element.type === 'checkbox') {\n                        return (\n                          <label\n                            htmlFor={element.name}\n                            key={element.name}\n                            className={`input input__${element.type}`}\n                          >\n                            <input\n                              id={element.name}\n                              key={element.name}\n                              type={element.type}\n                              name={element.name}\n                              checked={filters[element.name] as boolean}\n                              onChange={() => handlerChangeInput(element.name)}\n                            />\n                            {element.text && <span>{element.text}</span>}\n                          </label>\n                        );\n                      }\n\n                      return (\n                        <label\n                          htmlFor={element.name}\n                          key={element.name}\n                          className={`input input__${element.type}`}\n                        >\n                          <input\n                            id={element.name}\n                            key={element.name}\n                            type={element.type}\n                            name={element.name}\n                            value={filters[element.name] as string}\n                            onChange={(e) => handlerChangeInput(element.name, e.target.value)}\n                          />\n                        </label>\n                      );\n                    })\n                  }\n                </FilterRow>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}